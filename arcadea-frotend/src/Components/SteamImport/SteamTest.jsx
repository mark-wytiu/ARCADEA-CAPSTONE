import React, { useState } from 'react';\nimport { Button, Box, Typography, Alert, Paper } from '@mui/material';\nimport { isValidSteamId, extractSteamIdFromUrl } from '../../services/steamService';\n\n// This is a test component to verify Steam service functions work correctly\n// You can remove this after testing\nfunction SteamTest() {\n    const [results, setResults] = useState([]);\n\n    const runTests = () => {\n        const testResults = [];\n\n        // Test Steam ID validation\n        testResults.push({\n            test: 'Valid Steam ID',\n            input: '76561198000000000',\n            result: isValidSteamId('76561198000000000'),\n            expected: true\n        });\n\n        testResults.push({\n            test: 'Invalid Steam ID (too short)',\n            input: '123456789',\n            result: isValidSteamId('123456789'),\n            expected: false\n        });\n\n        // Test URL extraction\n        testResults.push({\n            test: 'Extract from profile URL',\n            input: 'https://steamcommunity.com/profiles/76561198000000000',\n            result: extractSteamIdFromUrl('https://steamcommunity.com/profiles/76561198000000000'),\n            expected: '76561198000000000'\n        });\n\n        testResults.push({\n            test: 'Extract from vanity URL',\n            input: 'https://steamcommunity.com/id/testuser',\n            result: extractSteamIdFromUrl('https://steamcommunity.com/id/testuser'),\n            expected: 'testuser'\n        });\n\n        testResults.push({\n            test: 'Invalid URL',\n            input: 'https://google.com',\n            result: extractSteamIdFromUrl('https://google.com'),\n            expected: null\n        });\n\n        setResults(testResults);\n    };\n\n    return (\n        <Paper sx={{ p: 3, m: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n                Steam Service Tests\n            </Typography>\n            \n            <Button variant=\"contained\" onClick={runTests} sx={{ mb: 2 }}>\n                Run Tests\n            </Button>\n\n            {results.map((test, index) => (\n                <Alert \n                    key={index}\n                    severity={JSON.stringify(test.result) === JSON.stringify(test.expected) ? 'success' : 'error'}\n                    sx={{ mb: 1 }}\n                >\n                    <strong>{test.test}</strong><br/>\n                    Input: {test.input}<br/>\n                    Result: {JSON.stringify(test.result)}<br/>\n                    Expected: {JSON.stringify(test.expected)}\n                </Alert>\n            ))}\n        </Paper>\n    );\n}\n\nexport default SteamTest;"
